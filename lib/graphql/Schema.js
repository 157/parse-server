"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GraphQLParseSchema = void 0;

var _graphql = require("graphql");

var _Config = _interopRequireDefault(require("../Config"));

var _ParseClass = _interopRequireDefault(require("./schemas/ParseClass"));

var _UserAuth = _interopRequireDefault(require("./schemas/UserAuth"));

var _Node = _interopRequireDefault(require("./schemas/Node"));

var _Functions = _interopRequireDefault(require("./schemas/Functions"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class GraphQLParseSchema {
  constructor(applicationId) {
    this.applicationId = applicationId;
  }

  static async loadSchemaFromDatabase(applicationId) {
    const schema = await _Config.default.get(applicationId).database.loadSchema();
    const allClasses = await schema.getAllClasses(true);
    const classNames = [];
    const fullSchema = allClasses.reduce((memo, classDef) => {
      memo[classDef.className] = classDef;
      classNames.push(classDef.className);
      return memo;
    }, {});
    fullSchema.__classNames = classNames;
    return Object.freeze(fullSchema);
  }

  async load() {
    this.schema = await GraphQLParseSchema.loadSchemaFromDatabase(this.applicationId);
    const graphQLSchema = new _graphql.GraphQLSchema({
      query: this.Query(),
      mutation: this.Mutation(),
      subscription: this.Subscription()
    });
    return {
      schema: graphQLSchema,
      rootValue: this.Root()
    };
  }

  Query() {
    return new _graphql.GraphQLObjectType({
      name: 'Query',
      description: `The query root of you Parse Server's graphQL interface`,
      fields: () => {
        const fields = {};
        Object.assign(fields, _Node.default.Query(this.schema));
        Object.assign(fields, _UserAuth.default.Query(this.schema));
        Object.assign(fields, _ParseClass.default.Query(this.schema));
        return fields;
      }
    });
  }

  Mutation() {
    const fields = {};
    Object.assign(fields, _UserAuth.default.Mutation(this.schema));
    Object.assign(fields, _ParseClass.default.Mutation(this.schema));
    Object.assign(fields, _Functions.default.Mutation(this.schema));
    return new _graphql.GraphQLObjectType({
      name: 'Mutation',
      fields
    });
  }

  Subscription() {
    const fields = {};
    Object.assign(fields, _ParseClass.default.Subscription(this.schema));
    return new _graphql.GraphQLObjectType({
      name: 'Subscription',
      fields
    });
  }

  Root() {
    return this.schema.__classNames.reduce((memo, className) => {
      memo[className] = {};
      return memo;
    }, {});
  }

}

exports.GraphQLParseSchema = GraphQLParseSchema;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ncmFwaHFsL1NjaGVtYS5qcyJdLCJuYW1lcyI6WyJHcmFwaFFMUGFyc2VTY2hlbWEiLCJjb25zdHJ1Y3RvciIsImFwcGxpY2F0aW9uSWQiLCJsb2FkU2NoZW1hRnJvbURhdGFiYXNlIiwic2NoZW1hIiwiQ29uZmlnIiwiZ2V0IiwiZGF0YWJhc2UiLCJsb2FkU2NoZW1hIiwiYWxsQ2xhc3NlcyIsImdldEFsbENsYXNzZXMiLCJjbGFzc05hbWVzIiwiZnVsbFNjaGVtYSIsInJlZHVjZSIsIm1lbW8iLCJjbGFzc0RlZiIsImNsYXNzTmFtZSIsInB1c2giLCJfX2NsYXNzTmFtZXMiLCJPYmplY3QiLCJmcmVlemUiLCJsb2FkIiwiZ3JhcGhRTFNjaGVtYSIsIkdyYXBoUUxTY2hlbWEiLCJxdWVyeSIsIlF1ZXJ5IiwibXV0YXRpb24iLCJNdXRhdGlvbiIsInN1YnNjcmlwdGlvbiIsIlN1YnNjcmlwdGlvbiIsInJvb3RWYWx1ZSIsIlJvb3QiLCJHcmFwaFFMT2JqZWN0VHlwZSIsIm5hbWUiLCJkZXNjcmlwdGlvbiIsImZpZWxkcyIsImFzc2lnbiIsIk5vZGVTY2hlbWEiLCJVc2VyQXV0aFNjaGVtYSIsIlBhcnNlQ2xhc3NTY2hlbWEiLCJGdW5jdGlvbnNTY2hlbWEiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFFQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUVPLE1BQU1BLGtCQUFOLENBQXlCO0FBSTlCQyxFQUFBQSxXQUFXLENBQUNDLGFBQUQsRUFBZ0I7QUFDekIsU0FBS0EsYUFBTCxHQUFxQkEsYUFBckI7QUFDRDs7QUFFRCxlQUFhQyxzQkFBYixDQUFvQ0QsYUFBcEMsRUFBbUQ7QUFDakQsVUFBTUUsTUFBTSxHQUFHLE1BQU1DLGdCQUFPQyxHQUFQLENBQVdKLGFBQVgsRUFBMEJLLFFBQTFCLENBQW1DQyxVQUFuQyxFQUFyQjtBQUNBLFVBQU1DLFVBQVUsR0FBRyxNQUFNTCxNQUFNLENBQUNNLGFBQVAsQ0FBcUIsSUFBckIs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RUFBQUEsSUFBSSxHQUFHO0FBQ0wsV0FBTyxLQUFLM0IsTUFBTCxDQUFZYyxZQUFaLENBQXlCTCxNQUF6QixDQUFnQyxDQUFDQyxJQUFELEVBQU9FLFNBQVAsS0FBcUI7QUFDMURGLE1BQUFBLElBQUksQ0FBQ0UsU0FBRCxDQUFKLEdBQWtCLEVBQWxCO0FBQ0EsYUFBT0YsSUFBUDtBQUNELEtBSE0sRUFHSixFQUhJLENBQVA7QUFJRDs7QUF6RTZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR3JhcGhRTFNjaGVtYSwgR3JhcGhRTE9iamVjdFR5cGUgfSBmcm9tICdncmFwaHFsJztcblxuaW1wb3J0IENvbmZpZyBmcm9tICcuLi9Db25maWcnO1xuXG5pbXBvcnQgUGFyc2VDbGFzc1NjaGVtYSBmcm9tICcuL3NjaGVtYXMvUGFyc2VDbGFzcyc7XG5pbXBvcnQgVXNlckF1dGhTY2hlbWEgZnJvbSAnLi9zY2hlbWFzL1VzZXJBdXRoJztcbmltcG9ydCBOb2RlU2NoZW1hIGZyb20gJy4vc2NoZW1hcy9Ob2RlJztcbmltcG9ydCBGdW5jdGlvbnNTY2hlbWEgZnJvbSAnLi9zY2hlbWFzL0Z1bmN0aW9ucyc7XG5cbmV4cG9ydCBjbGFzcyBHcmFwaFFMUGFyc2VTY2hlbWEge1xuICBzY2hlbWE7XG4gIGFwcGxpY2F0aW9uSWQ7XG5cbiAgY29uc3RydWN0b3IoYXBwbGljYXRpb25JZCkge1xuICAgIHRoaXMuYXBwbGljYXRpb25JZCA9IGFwcGxpY2F0aW9uSWQ7XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgbG9hZFNjaGVtYUZyb21EYXRhYmFzZShhcHBsaWNhdGlvbklkKSB7XG4gICAgY29uc3Qgc2NoZW1hID0gYXdhaXQgQ29uZmlnLmdldChhcHBsaWNhdGlvbklkKS5kYXRhYmFzZS5sb2FkU2NoZW1hKCk7XG4gICAgY29uc3QgYWxsQ2xhc3NlcyA9IGF3YWl0IHNjaGVtYS5nZXRBbGxDbGFzc2VzKHRydWUpO1xuICAgIGNvbnN0IGNsYXNzTmFtZXMgPSBbXTtcbiAgICBjb25zdCBmdWxsU2NoZW1hID0gYWxsQ2xhc3Nlcy5yZWR1Y2UoKG1lbW8sIGNsYXNzRGVmKSA9PiB7XG4gICAgICBtZW1vW2NsYXNzRGVmLmNsYXNzTmFtZV0gPSBjbGFzc0RlZjtcbiAgICAgIGNsYXNzTmFtZXMucHVzaChjbGFzc0RlZi5jbGFzc05hbWUpO1xuICAgICAgcmV0dXJuIG1lbW87XG4gICAgfSwge30pO1xuICAgIGZ1bGxTY2hlbWEuX19jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcbiAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZShmdWxsU2NoZW1hKTtcbiAgfVxuXG4gIGFzeW5jIGxvYWQoKSB7XG4gICAgdGhpcy5zY2hlbWEgPSBhd2FpdCBHcmFwaFFMUGFyc2VTY2hlbWEubG9hZFNjaGVtYUZyb21EYXRhYmFzZShcbiAgICAgIHRoaXMuYXBwbGljYXRpb25JZFxuICAgICk7XG4gICAgY29uc3QgZ3JhcGhRTFNjaGVtYSA9IG5ldyBHcmFwaFFMU2NoZW1hKHtcbiAgICAgIHF1ZXJ5OiB0aGlzLlF1ZXJ5KCksXG4gICAgICBtdXRhdGlvbjogdGhpcy5NdXRhdGlvbigpLFxuICAgICAgc3Vic2NyaXB0aW9uOiB0aGlzLlN1YnNjcmlwdGlvbigpLFxuICAgIH0pO1xuICAgIHJldHVybiB7IHNjaGVtYTogZ3JhcGhRTFNjaGVtYSwgcm9vdFZhbHVlOiB0aGlzLlJvb3QoKSB9O1xuICB9XG5cbiAgUXVlcnkoKSB7XG4gICAgcmV0dXJuIG5ldyBHcmFwaFFMT2JqZWN0VHlwZSh7XG4gICAgICBuYW1lOiAnUXVlcnknLFxuICAgICAgZGVzY3JpcHRpb246IGBUaGUgcXVlcnkgcm9vdCBvZiB5b3UgUGFyc2UgU2VydmVyJ3MgZ3JhcGhRTCBpbnRlcmZhY2VgLFxuICAgICAgZmllbGRzOiAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGZpZWxkcyA9IHt9O1xuICAgICAgICBPYmplY3QuYXNzaWduKGZpZWxkcywgTm9kZVNjaGVtYS5RdWVyeSh0aGlzLnNjaGVtYSkpO1xuICAgICAgICBPYmplY3QuYXNzaWduKGZpZWxkcywgVXNlckF1dGhTY2hlbWEuUXVlcnkodGhpcy5zY2hlbWEpKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihmaWVsZHMsIFBhcnNlQ2xhc3NTY2hlbWEuUXVlcnkodGhpcy5zY2hlbWEpKTtcbiAgICAgICAgcmV0dXJuIGZpZWxkcztcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuICBNdXRhdGlvbigpIHtcbiAgICBjb25zdCBmaWVsZHMgPSB7fTtcbiAgICBPYmplY3QuYXNzaWduKGZpZWxkcywgVXNlckF1dGhTY2hlbWEuTXV0YXRpb24odGhpcy5zY2hlbWEpKTtcbiAgICBPYmplY3QuYXNzaWduKGZpZWxkcywgUGFyc2VDbGFzc1NjaGVtYS5NdXRhdGlvbih0aGlzLnNjaGVtYSkpO1xuICAgIE9iamVjdC5hc3NpZ24oZmllbGRzLCBGdW5jdGlvbnNTY2hlbWEuTXV0YXRpb24odGhpcy5zY2hlbWEpKTtcblxuICAgIHJldHVybiBuZXcgR3JhcGhRTE9iamVjdFR5cGUoe1xuICAgICAgbmFtZTogJ011dGF0aW9uJyxcbiAgICAgIGZpZWxkcyxcbiAgICB9KTtcbiAgfVxuXG4gIFN1YnNjcmlwdGlvbigpIHtcbiAgICBjb25zdCBmaWVsZHMgPSB7fTtcbiAgICBPYmplY3QuYXNzaWduKGZpZWxkcywgUGFyc2VDbGFzc1NjaGVtYS5TdWJzY3JpcHRpb24odGhpcy5zY2hlbWEpKTtcbiAgICByZXR1cm4gbmV3IEdyYXBoUUxPYmplY3RUeXBlKHtcbiAgICAgIG5hbWU6ICdTdWJzY3JpcHRpb24nLFxuICAgICAgZmllbGRzLFxuICAgIH0pO1xuICB9XG5cbiAgUm9vdCgpIHtcbiAgICByZXR1cm4gdGhpcy5zY2hlbWEuX19jbGFzc05hbWVzLnJlZHVjZSgobWVtbywgY2xhc3NOYW1lKSA9PiB7XG4gICAgICBtZW1vW2NsYXNzTmFtZV0gPSB7fTtcbiAgICAgIHJldHVybiBtZW1vO1xuICAgIH0sIHt9KTtcbiAgfVxufVxuIl19