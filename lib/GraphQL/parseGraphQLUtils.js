"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.enforceMasterKeyAccess = enforceMasterKeyAccess;
exports.toGraphQLError = toGraphQLError;
exports.getParseClassMutationConfig = exports.extractKeysAndInclude = void 0;

var _node = _interopRequireDefault(require("parse/node"));

var _apolloServerCore = require("apollo-server-core");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function enforceMasterKeyAccess(auth) {
  if (!auth.isMaster) {
    throw new _node.default.Error(_node.default.Error.OPERATION_FORBIDDEN, 'unauthorized: master key is required');
  }
}

function toGraphQLError(error) {
  let code, message;

  if (error instanceof _node.default.Error) {
    code = error.code;
    message = error.message;
  } else {
    code = _node.default.Error.INTERNAL_SERVER_ERROR;
    message = 'Internal server error';
  }

  return new _apolloServerCore.ApolloError(message, code);
}

const extractKeysAndInclude = selectedFields => {
  selectedFields = selectedFields.filter(field => !field.includes('__typename')); // Handles "id" field for both current and included objects

  selectedFields = selectedFields.map(field => {
    if (field === 'id') return 'objectId';
    return field.endsWith('.id') ? `${field.substring(0, field.lastIndexOf('.id'))}.objectId` : field;
  });
  let keys = undefined;
  let include = undefined;

  if (selectedFields.length > 0) {
    keys = selectedFields.join(','); // We can use this shortcut since optimization is handled
    // later on RestQuery, avoid overhead here.

    include = keys;
  }

  return {
    keys,
    include
  };
};

exports.extractKeysAndInclude = extractKeysAndInclude;

const getParseClassMutationConfig = function (parseClassConfig) {
  return parseClassConfig && parseClassConfig.mutation || {};
};

exports.getParseClassMutationConfig = getParseClassMutationConfig;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9HcmFwaFFML3BhcnNlR3JhcGhRTFV0aWxzLmpzIl0sIm5hbWVzIjpbImVuZm9yY2VNYXN0ZXJLZXlBY2Nlc3MiLCJhdXRoIiwiaXNNYXN0ZXIiLCJQYXJzZSIsIkVycm9yIiwiT1BFUkFUSU9OX0ZPUkJJRERFTiIsInRvR3JhcGhRTEVycm9yIiwiZXJyb3IiLCJjb2RlIiwibWVzc2FnZSIsIklOVEVSTkFMX1NFUlZFUl9FUlJPUiIsIkFwb2xsb0Vycm9yIiwiZXh0cmFjdEtleXNBbmRJbmNsdWRlIiwic2VsZWN0ZWRGaWVsZHMiLCJmaWx0ZXIiLCJmaWVsZCIsImluY2x1ZGVzIiwibWFwIiwiZW5kc1dpdGgiLCJzdWJzdHJpbmciLCJsYXN0SW5kZXhPZiIsImtleXMiLCJ1bmRlZmluZWQiLCJpbmNsdWRlIiwibGVuZ3RoIiwiam9pbiIsImdldFBhcnNlQ2xhc3NNdXRhdGlvbkNvbmZpZyIsInBhcnNlQ2xhc3NDb25maWciLCJtdXRhdGlvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBQ0E7Ozs7QUFFTyxTQUFTQSxzQkFBVCxDQUFnQ0MsSUFBaEMsRUFBc0M7QUFDM0MsTUFBSSxDQUFDQSxJQUFJLENBQUNDLFFBQVYsRUFBb0I7QUFDbEIsVUFBTSxJQUFJQyxjQUFNQyxLQUFWLENBQ0pELGNBQU1DLEtBQU4sQ0FBWUMsbUJBRFIsRUFFSixzQ0FGSSxDQUFOO0FBSUQ7QUFDRjs7QUFFTSxTQUFTQyxjQUFULENBQXdCQyxLQUF4QixFQUErQjtBQUNwQyxNQUFJQyxJQUFKLEVBQVVDLE9BQVY7O0FBQ0EsTUFBSUYsS0FBSyxZQUFZSixjQUFNQyxLQUEzQixFQUFrQztBQUNoQ0ksSUFBQUEsSUFBSSxHQUFHRCxLQUFLLENBQUNDLElBQWI7QUFDQUMsSUFBQUEsT0FBTyxHQUFHRixLQUFLLENBQUNFLE9BQWhCO0FBQ0QsR0FIRCxNQUdPO0FBQ0xELElBQUFBLElBQUksR0FBR0wsY0FBTUMsS0FBTixDQUFZTSxxQkFBbkI7QUFDQUQsSUFBQUEsT0FBTyxHQUFHLHVCQUFWO0FBQ0Q7O0FBQ0QsU0FBTyxJQUFJRSw2QkFBSixDQUFnQkYsT0FBaEIsRUFBeUJELElBQXpCLENBQVA7QUFDRDs7QUFFTSxNQUFNSSxxQkFBcUIsR0FBSUMsY0FBRCxJQUFvQjtBQUN2REEsRUFBQUEsY0FBYyxHQUFHQSxjQUFjLENBQUNDLE1BQWYsQ0FDZEMsS0FBRCxJQUFXLENBQUNBLEtBQUssQ0FBQ0MsUUFBTixDQUFlLFlBQWYsQ0FERyxDQUFqQixDQUR1RCxDQUdwRDs7QUFFSEgsRUFBQUEsY0FBYyxHQUFHQSxjQUFjLENBQUNJLEdBQWYsQ0FBb0JGLEtBQUQsSUFBVztBQUM3QyxRQUFJQSxLQUFLLEtBQUssSUFBZCxFQUFvQixPQUFPLFVBQVA7QUFDcEIsV0FBT0EsS0FBSyxDQUFDRyxRQUFOLENBQWUsS0FBZixJQUNGLEdBQUVILEtBQUssQ0FBQ0ksU0FBTixDQUFnQixDQUFoQixFQUFtQkosS0FBSyxDQUFDSyxXQUFOLENBQWtCLEtBQWxCLENBQW5CLENBQTZDLFdBRDdDLEdBRUhMLEtBRko7QUFHRCxHQUxnQixDQUFqQjtBQU1BLE1BQUlNLElBQUksR0FBR0MsU0FBWDtBQUNBLE1BQUlDLE9BQU8sR0FBR0QsU0FBZDs7QUFFQSxNQUFJVCxjQUFjLENBQUNXLE1BQWYsR0FBd0IsQ0FBNUIsRUFBK0I7QUFDN0JILElBQUFBLElBQUksR0FBR1IsY0FBYyxDQUFDWSxJQUFmLENBQW9CLEdBQXBCLENBQVAsQ0FENkIsQ0FFN0I7QUFDQTs7QUFDQUYsSUFBQUEsT0FBTyxHQUFHRixJQUFWO0FBQ0Q7O0FBQ0QsU0FBTztBQUNMQSxJQUFBQSxJQURLO0FBRUxFLElBQUFBO0FBRkssR0FBUDtBQUlELENBeEJNOzs7O0FBMEJBLE1BQU1HLDJCQUEyQixHQUFHLFVBQVVDLGdCQUFWLEVBQTRCO0FBQ3JFLFNBQVFBLGdCQUFnQixJQUFJQSxnQkFBZ0IsQ0FBQ0MsUUFBdEMsSUFBbUQsRUFBMUQ7QUFDRCxDQUZNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFBhcnNlIGZyb20gJ3BhcnNlL25vZGUnO1xuaW1wb3J0IHsgQXBvbGxvRXJyb3IgfSBmcm9tICdhcG9sbG8tc2VydmVyLWNvcmUnO1xuXG5leHBvcnQgZnVuY3Rpb24gZW5mb3JjZU1hc3RlcktleUFjY2VzcyhhdXRoKSB7XG4gIGlmICghYXV0aC5pc01hc3Rlcikge1xuICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihcbiAgICAgIFBhcnNlLkVycm9yLk9QRVJBVElPTl9GT1JCSURERU4sXG4gICAgICAndW5hdXRob3JpemVkOiBtYXN0ZXIga2V5IGlzIHJlcXVpcmVkJ1xuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvR3JhcGhRTEVycm9yKGVycm9yKSB7XG4gIGxldCBjb2RlLCBtZXNzYWdlO1xuICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBQYXJzZS5FcnJvcikge1xuICAgIGNvZGUgPSBlcnJvci5jb2RlO1xuICAgIG1lc3NhZ2UgPSBlcnJvci5tZXNzYWdlO1xuICB9IGVsc2Uge1xuICAgIGNvZGUgPSBQYXJzZS5FcnJvci5JTlRFUk5BTF9TRVJWRVJfRVJST1I7XG4gICAgbWVzc2FnZSA9ICdJbnRlcm5hbCBzZXJ2ZXIgZXJyb3InO1xuICB9XG4gIHJldHVybiBuZXcgQXBvbGxvRXJyb3IobWVzc2FnZSwgY29kZSk7XG59XG5cbmV4cG9ydCBjb25zdCBleHRyYWN0S2V5c0FuZEluY2x1ZGUgPSAoc2VsZWN0ZWRGaWVsZHMpID0+IHtcbiAgc2VsZWN0ZWRGaWVsZHMgPSBzZWxlY3RlZEZpZWxkcy5maWx0ZXIoXG4gICAgKGZpZWxkKSA9PiAhZmllbGQuaW5jbHVkZXMoJ19fdHlwZW5hbWUnKVxuICApOyAvLyBIYW5kbGVzIFwiaWRcIiBmaWVsZCBmb3IgYm90aCBjdXJyZW50IGFuZCBpbmNsdWRlZCBvYmplY3RzXG5cbiAgc2VsZWN0ZWRGaWVsZHMgPSBzZWxlY3RlZEZpZWxkcy5tYXAoKGZpZWxkKSA9PiB7XG4gICAgaWYgKGZpZWxkID09PSAnaWQnKSByZXR1cm4gJ29iamVjdElkJztcbiAgICByZXR1cm4gZmllbGQuZW5kc1dpdGgoJy5pZCcpXG4gICAgICA/IGAke2ZpZWxkLnN1YnN0cmluZygwLCBmaWVsZC5sYXN0SW5kZXhPZignLmlkJykpfS5vYmplY3RJZGBcbiAgICAgIDogZmllbGQ7XG4gIH0pO1xuICBsZXQga2V5cyA9IHVuZGVmaW5lZDtcbiAgbGV0IGluY2x1ZGUgPSB1bmRlZmluZWQ7XG5cbiAgaWYgKHNlbGVjdGVkRmllbGRzLmxlbmd0aCA+IDApIHtcbiAgICBrZXlzID0gc2VsZWN0ZWRGaWVsZHMuam9pbignLCcpO1xuICAgIC8vIFdlIGNhbiB1c2UgdGhpcyBzaG9ydGN1dCBzaW5jZSBvcHRpbWl6YXRpb24gaXMgaGFuZGxlZFxuICAgIC8vIGxhdGVyIG9uIFJlc3RRdWVyeSwgYXZvaWQgb3ZlcmhlYWQgaGVyZS5cbiAgICBpbmNsdWRlID0ga2V5cztcbiAgfVxuICByZXR1cm4ge1xuICAgIGtleXMsXG4gICAgaW5jbHVkZSxcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRQYXJzZUNsYXNzTXV0YXRpb25Db25maWcgPSBmdW5jdGlvbiAocGFyc2VDbGFzc0NvbmZpZykge1xuICByZXR1cm4gKHBhcnNlQ2xhc3NDb25maWcgJiYgcGFyc2VDbGFzc0NvbmZpZy5tdXRhdGlvbikgfHwge307XG59O1xuIl19